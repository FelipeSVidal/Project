/*
 * The MIT License
 *
 * Copyright 2014 Universidade Estadual do Ceará.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package br.uece.lotus.app;

import br.uece.lotus.Component;
import br.uece.lotus.Project;
import br.uece.lotus.State;
import br.uece.lotus.Transition;
import br.uece.lotus.ext.Plugin;
import br.uece.lotus.app.view.ComponentEditor;
import br.uece.lotus.app.view.StateView;
import br.uece.lotus.app.view.properties.PropertyEditor;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.ContextMenu;
import javafx.scene.control.ListView;
import javafx.scene.control.MenuBar;
import javafx.scene.control.SelectionMode;
import javafx.scene.control.Tab;
import javafx.scene.control.TabPane;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleButton;
import javafx.scene.control.ToggleGroup;
import javafx.scene.control.ToolBar;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;

public class MainSceneController1 extends Plugin implements Initializable, UserInterface {

    private Project mProjeto;

    //////////////////////////////////////////
    // Componentes Visuais
    //////////////////////////////////////////
    @FXML
    protected MenuBar mMnuPrincipal;
    @FXML
    protected BorderPane mEditorWrapper;
    @FXML
    protected TabPane mTabComponentes;
    @FXML
    private ListView mLstComponents;
    private ComponentEditor mEditor;
    private ContextMenu mComponentsContextMenu;
    private ContextMenu mStateContextMenu;
    //////////////////////////////////////////
    // Botões da barra de ferramentas
    //////////////////////////////////////////
    @FXML
    protected ToolBar mPnlFerramentas;
    @FXML
    protected Button mBtnNovoComponente;
    @FXML
    protected Button mBtnNovoProjeto;
    @FXML
    protected Button mBtnAbrirProjeto;
    @FXML
    protected Button mBtnSalvar;
    //////////////////////////////////////////
    // Ferramentas Design LTS
    //////////////////////////////////////////
    @FXML
    protected ToolBar mBarFerramentas;
    @FXML
    protected ToggleButton mBtnDefault;
    @FXML
    protected ToggleButton mBtnVertice;
    @FXML
    protected ToggleButton mBtnTransicao;
    @FXML
    protected ToggleButton mBtnApagar;

    //////////////////////////////////////////
    // Propriedades
    //////////////////////////////////////////
    @FXML
    private ChoiceBox mCbxDefault;
    @FXML
    private ChoiceBox mCbxError;
    @FXML
    private TextField mEdtName;
    @FXML
    private TextField mEdtLabel;
    @FXML
    private TextField mEdtPositionX;
    @FXML
    private TextField mEdtPositionY;
    @FXML
    private TextField mEdtGuard;
    @FXML
    private TextField mEdtProbability;
    private PropertyEditor mPropertyEditor;

    private final ChangeListener<Tab> mAoSelecionarAba = (ObservableValue<? extends Tab> ov, Tab t, Tab t1) -> {
        changeComponent(t1 == null ? null : (Component) t1.getUserData());
    };
    private final EventHandler<MouseEvent> mAoDuploCliqueListaComponentes = (MouseEvent t) -> {
        if (t.getButton().equals(MouseButton.PRIMARY)) {
            if (t.getClickCount() == 2) {
                int i = mLstComponents.getSelectionModel().getSelectedIndex();
                Component c = mProjeto.getComponent(i);
                changeComponent(c);
            }
        }
    };
    private final EventHandler<ActionEvent> mMudarNomeComponentePelaAbaHandler = (ActionEvent t) -> {
        EditableTab tab = ((EditableTab) t.getSource());
        ((Component) tab.getUserData()).setName(tab.getLabel());

    };

    private Component.Listener mComponentListener = new Component.Listener() {
        @Override
        public void onChange(Component component) {
            int i = mProjeto.indexOfComponent(component);
            if (i >= 0) {
                final ObservableList items = mLstComponents.getItems();
                items.remove(i);
                items.add(i, component.getName());
            }
        }

        @Override
        public void onStateCreated(Component component, State state) {
        }

        @Override
        public void onStateRemoved(Component component, State state) {
        }

        @Override
        public void onTransitionCreated(Component component, Transition state) {
        }

        @Override
        public void onTransitionRemoved(Component component, Transition state) {
        }
    };
    private final Project.Listener mProjectListener = new Project.Listener() {

        @Override
        public void onChange(Project project) {
            //ignora
        }

        @Override
        public void onComponentCreated(Project project, Component component) {
            component.addListener(mComponentListener);
            mLstComponents.getItems().add(component.getName());
        }

        @Override
        public void onComponentRemoved(Project project, Component component) {
            component.removeListener(mComponentListener);
            mLstComponents.getItems().remove(component.getName());
        }

    };
    private final ComponentEditor.Listener mEditorListener = new ComponentEditor.Listener() {
        @Override
        public void onSelectionChange(ComponentEditor v) {
            mPropertyEditor.changeObject(v.getSelectedView());
        }

        @Override
        public void onStateViewCreated(StateView v) {
            v.setOnMouseClicked((MouseEvent event) -> {
                if (MouseButton.SECONDARY.equals(event.getButton())) {
                    mStateContextMenu.show(Startup.getStage(), event.getScreenX(), event.getScreenY());
                }
            });
        }
    };

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        ToggleGroup g = new ToggleGroup();
        mBtnDefault.setToggleGroup(g);
        mBtnVertice.setToggleGroup(g);
        mBtnTransicao.setToggleGroup(g);
        mBtnApagar.setToggleGroup(g);

        mTabComponentes.getSelectionModel().selectedItemProperty().addListener(mAoSelecionarAba);
        mLstComponents.setOnMouseClicked(mAoDuploCliqueListaComponentes);
        mLstComponents.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        mComponentsContextMenu = new ContextMenu();
        mLstComponents.setContextMenu(mComponentsContextMenu);
        mStateContextMenu = new ContextMenu();

        mEditor = new ComponentEditor();
        mEditor.setId("canvas");
        mEditorWrapper.setCenter(mEditor);
        changeComponent(null);

        mPropertyEditor = new PropertyEditor(mCbxDefault, mCbxError, mEdtName, mEdtLabel, mEdtPositionX, mEdtPositionY, mEdtGuard, mEdtProbability);
        mEditor.addListener(mEditorListener);
        mPropertyEditor.changeObject(null);
    }

    @Override
    public void changeProject(Project p) {
        if (mProjeto != null) {
            mProjeto.removeListener(mProjectListener);
        }
        mProjeto = p;
        if (mProjeto != null) {
            List aux = mLstComponents.getItems();
            aux.clear();
            for (Component c : mProjeto.getComponents()) {
                aux.add(c.getName());
            }
            mProjeto.addListener(mProjectListener);
            mTabComponentes.getTabs().clear();
            if (p.getComponentsCount() > 0) {
                changeComponent(p.getComponent(0));
            } else {
                changeComponent(null);
            }
        }
    }

    @FXML
    protected void handleFerramentaDefault(ActionEvent event) {
        mEditor.setModo(ComponentEditor.MODO_NENHUM);
    }

    @FXML
    protected void handleFerramentaVertice(ActionEvent event) {
        mEditor.setModo(ComponentEditor.MODO_VERTICE);
    }

    @FXML
    protected void handleFerramentaTransicao(ActionEvent event) {
        mEditor.setModo(ComponentEditor.MODO_TRANSICAO);
    }

    @FXML
    protected void handleFerramentaApagar(ActionEvent event) {
        mEditor.setModo(ComponentEditor.MODO_REMOVER);
    }

    @Override
    public void changeComponent(Component c) {
        mEditor.setComponent(c);
        mEditor.setVisible(c != null);
        mBarFerramentas.setVisible(c != null);
        if (c == null) {
            return;
        }

        int i = mProjeto.indexOfComponent(c);
        mLstComponents.getSelectionModel().select(i);
        //ajustar aba
        for (Tab tab : mTabComponentes.getTabs()) {
            if (tab.getUserData() == c) {
                mTabComponentes.getSelectionModel().select(tab);
                return;
            }
        }

        EditableTab aux = new EditableTab(c.getName());
        aux.setUserData(c);
        aux.setOnChange(mMudarNomeComponentePelaAbaHandler);
        mTabComponentes.getTabs()
                .add(aux);
        mTabComponentes.getSelectionModel().select(aux);
    }

    @Override
    public List<Project> getSelectedProjects() {
        List<Project> aux = new ArrayList<>();
        if (mProjeto != null) {
            aux.add(mProjeto);
        }
        return aux;
    }

    @Override
    public List<Component> getSelectedComponents() {
        List<Component> aux = new ArrayList<>();
        List<String> foo = mLstComponents.getItems();
        for (Object o : mLstComponents.getSelectionModel().getSelectedItems()) {
            int i = foo.indexOf(o);
            aux.add(mProjeto.getComponent(i));
        }
        return aux;
    }

    @Override
    public List<State> getSelectedStates() {
        List<State> aux = new ArrayList<>();
        aux.add(((StateView) mEditor.getSelectedView()).getState());
        return aux;
    }

    @Override
    public void addMenuHook(int menu, int weigth, String structPath, Runnable action) {
        switch (menu) {
            case UserInterface.MAIN_MENU: {
                MenuUtils.addMenuBarEntry(mMnuPrincipal, weigth, structPath, action);
                break;
            }
            case UserInterface.PROJECT_MENU: {
                break;
            }
            case UserInterface.COMPONENT_MENU: {
                MenuUtils.addContextMenuEntry(mComponentsContextMenu, weigth, structPath, action);
                break;
            }
            case UserInterface.STATE_MENU: {
                MenuUtils.addContextMenuEntry(mStateContextMenu, weigth, structPath, action);
                break;
            }
        }
    }

    @Override
    public void setTitle(String title) {
        Startup.getStage().setTitle(title);
    }

}
